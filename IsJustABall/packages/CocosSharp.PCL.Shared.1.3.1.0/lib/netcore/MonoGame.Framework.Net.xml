<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.Framework.Net</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Xna.Framework.Windows8.GamerServices.EventAsync">
            <summary>
            Contains helper methods used to generate Tasks for waiting for event occurrence.
            Based on: <a href="http://social.msdn.microsoft.com/Forums/sk/async/thread/30f3339c-5e04-4aa8-9a09-9be72d9d9a1b">http://social.msdn.microsoft.com/Forums/sk/async/thread/30f3339c-5e04-4aa8-9a09-9be72d9d9a1b</a>.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Windows8.GamerServices.EventAsync.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/>
            that waits for an event to occur.
            </summary>
            <example>
            <![CDATA[
            await EventAsync.FromEvent(
                eh => storyboard.Completed += eh,
                eh => storyboard.Completed -= eh,
                storyboard.Begin);
            ]]>
            </example>
            <param name="addEventHandler">
            The action that subscribes to the event.
            </param>
            <param name="removeEventHandler">
            The action that unsubscribes from the event when it first occurs.
            </param>
            <param name="beginAction">
            The action to call after subscribing to the event.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that
            completes when the event registered in
            <paramref name="addEventHandler"/> occurs.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Windows8.GamerServices.EventAsync.FromRoutedEvent(System.Action{Windows.UI.Xaml.RoutedEventHandler},System.Action{Windows.UI.Xaml.RoutedEventHandler},System.Action)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/>
            that waits for an event to occur.
            </summary>
            <example>
            <![CDATA[
            await EventAsync.FromEvent(
                eh => button.Click += eh,
                eh => button.Click -= eh);
            ]]>
            </example>
            <param name="addEventHandler">
            The action that subscribes to the event.
            </param>
            <param name="removeEventHandler">
            The action that unsubscribes from the event when it first occurs.
            </param>
            <param name="beginAction">
            The action to call after subscribing to the event.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that
            completes when the event registered in
            <paramref name="addEventHandler"/> occurs.
            </returns>
        </member>
        <member name="P:Microsoft.Xna.Framework.Windows8.GamerServices.EventAsync.EventHandlerTaskSource`1.Task">
            <summary>
            Returns a task that waits for the event to occur.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Windows8.GamerServices.EventAsync.RoutedEventHandlerTaskSource.Task">
            <summary>
            Returns a task that waits for the routed to occur.
            </summary>
        </member>
    </members>
</doc>
